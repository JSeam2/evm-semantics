[topLevel]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
output: _
memoryUsed: 0 => _
calldata: #abiCallData("collectToken", #uint256(NOW), #uint256(START))
wordStack: .WordStack => _
localMem: .Map => ( .Map[ RET_ADDR := #asByteStackInWidth(1, 32) ] _:Map )
pc: 0 => _
gas: GASCAP => _
log: _
refund: _ => _
storage:
    #hashedLocation({COMPILER}, {COLLECTEDTOKENS}, .IntList) |-> (COLLECTED => COLLECTED +Int VALUE)
    #hashedLocation({COMPILER}, {BALANCE}, .IntList) |-> (BAL => BAL -Int VALUE)
    _:Map
requires:
     andBool 0 <=Int COLLECTED  andBool COLLECTED <Int (2 ^Int 256)
     andBool 0 <=Int BAL        andBool BAL <Int (2 ^Int 256)
     andBool 0 <Int START       andBool START <Int (2 ^Int 256)
     andBool 0 <=Int (COLLECTED +Int BAL) andBool (COLLECTED +Int BAL) *Int 3153600 <Int (2 ^Int 256)
     andBool 0 <Int (NOW -Int START) andBool (NOW -Int START) <Int (2 ^Int 256)
     // canExtract >= 0
     andBool #accumulatedReleasedTokens(BAL, COLLECTED, START, NOW) >Int COLLECTED +Int 3
     // canExtract > balance
     andBool #accumulatedReleasedTokens(BAL, COLLECTED, START, NOW) <Int (BAL +Int COLLECTED) -Int 10
     // Max Gas
     andBool GASCAP >=Int (293 *Int ((NOW -Int START) /Int 31536000)) +Int 100000
ensures: ensures VALUE ==Int @canExtractThisYear(COLLECTED +Int BAL, NOW, START) +Int BAL -Int @remainingTokens(COLLECTED +Int BAL, NOW, START)
attribute: 


[mul]
k: #execute => #execute
output: _
memoryUsed: MU
calldata: _
wordStack: Y : X : RET : WS => X : Y : RET : X *Int Y : WS
localMem: _
pc: 750 => 793
gas: GASCAP => GASCAP -Int 114
log: _
refund: _
storage: _
requires:
     andBool 0 <=Int X          andBool X          <Int (2 ^Int 256)
     andBool 0 <=Int Y          andBool Y          <Int (2 ^Int 256)
     andBool 0 <=Int X *Int Y   andBool X *Int Y   <Int (2 ^Int 256)
     andBool 0 <=Int MU         andBool MU         <Int (2 ^Int 256)
     //
     andBool #sizeWordStack(WS) <Int 20
     //
     andBool GASCAP >=Int 114   // for the current spec
ensures: 
attribute: [trusted]


[loopInvariant]
k: #execute => #execute
output: _
memoryUsed: MU
callData: _
wordStack: CANEXTRACT : CANEXTRACTTHISYEAR : TOTALREWARDTHISYEAR : INDEX     : YEARCOUNT : REMAINING : TOTAL : RETURNVAL : START : NOW : RPC : FUNID : .WordStack
        => CANEXTRACT : CANEXTRACTTHISYEAR : TOTALREWARDTHISYEAR : YEARCOUNT : YEARCOUNT : #roundpower(REMAINING, 90, 100, YEARCOUNT -Int INDEX) : TOTAL : RETURNVAL : START : NOW : RPC : FUNID : .WordStack
localMem: _
pc: 498 => 545
gas: GASCAP => GASCAP -Int (293 *Int (YEARCOUNT -Int INDEX)) -Int 26
log: _
refund: _
storage: _
requires:
     andBool 0 <=Int MU         andBool MU                <Int  (2 ^Int 256)
     andBool 0 <=Int INDEX      andBool INDEX             <=Int YEARCOUNT
     andBool 0 <=Int YEARCOUNT  andBool YEARCOUNT         <Int (2 ^Int 256)
     andBool 0 <=Int REMAINING  andBool REMAINING *Int 90 <Int (2 ^Int 256)
     andBool GASCAP >=Int ((293 *Int (YEARCOUNT -Int INDEX)) +Int 26)
ensures: 
attribute: 
