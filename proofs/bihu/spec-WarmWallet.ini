[forwardToHotWallet]
memoryUsed: 0 => _
callData: #abiCallData("forwardToHotWallet", #uint256(AMOUNT))
wordStack: .WordStack => _
pc: 0 => _
gas: {GASCAP} => _
log: _
refund: _
requires:
     andBool 0 <=Int AMOUNT             andBool AMOUNT              <Int (2 ^Int 256)
     andBool 0 <=Int WITHDRAWER         andBool WITHDRAWER          <Int (2 ^Int 160)
     andBool 0 <=Int WITHDRAWLIMIT      andBool WITHDRAWLIMIT       <Int (2 ^Int 256)
     andBool 0 <=Int LASTWITHDRAWTIME   andBool LASTWITHDRAWTIME    <Int (2 ^Int 256)
     andBool 0 <=Int PAUSED             andBool PAUSED              <Int (2 ^Int 256)
ensures: 
attribute: 


[forwardToHotWallet-success]
k: #execute => (RETURN RET_ADDR:Int 32 ~> _)
output: _
localMem: .Map => ( .Map[ RET_ADDR := #asByteStackInWidth(RET_VAL, 32) ] _:Map )
storage:
    #hashedLocation({COMPILER}, {_WITHDRAWER},       .IntList) |-> WITHDRAWER
    #hashedLocation({COMPILER}, {_WITHDRAWLIMIT},    .IntList) |-> WITHDRAWLIMIT
    #hashedLocation({COMPILER}, {_LASTWITHDRAWTIME}, .IntList) |-> ( LASTWITHDRAWTIME => NOW )
    #hashedLocation({COMPILER}, {_PAUSED},           .IntList) |-> PAUSED
    _:Map
+requires:
     andBool PAUSED ==Int 0                                     // notPaused
     andBool CALLER_ID ==Int WITHDRAWER                         // onlyWithdrawer
     andBool AMOUNT >Int 0                                      // require(_amount > 0);
     andBool NOW >Int LASTWITHDRAWTIME +Word (24 *Int 3600)     // require(_time > (lastWithdrawTime + 24 hours));
                                       // NOTE: +Word instead of +Int

[forwardToHotWallet-success-1]
+requires:
     andBool AMOUNT <=Int WITHDRAWLIMIT // if (amount > withdrawLimit) { ... }
    ensures  RET_VAL ==Int AMOUNT

[forwardToHotWallet-success-2]
+requires:
     andBool AMOUNT >Int WITHDRAWLIMIT // if (amount > withdrawLimit) { ... }
    ensures  RET_VAL ==Int WITHDRAWLIMIT


[forwardToHotWallet-failure]
k: #execute => #revert
output: _ => .WordStack
localMem: .Map => _
storage:
    #hashedLocation({COMPILER}, {_WITHDRAWER},       .IntList) |-> WITHDRAWER
    #hashedLocation({COMPILER}, {_WITHDRAWLIMIT},    .IntList) |-> WITHDRAWLIMIT
    #hashedLocation({COMPILER}, {_LASTWITHDRAWTIME}, .IntList) |-> LASTWITHDRAWTIME
    #hashedLocation({COMPILER}, {_PAUSED},           .IntList) |-> PAUSED
    _:Map
; TODO: have a single spec with orBool
;+requires:
;     andBool (
;             PAUSED ==Int 1 <<Int (20 *Int 8)                   // notPaused        // NOTE: `paused` packed with `owner`
;      orBool CALLER_ID =/=Int WITHDRAWER                        // onlyWithdrawer
;      orBool AMOUNT <=Int 0                                     // require(_amount > 0);
;      orBool NOW <=Int LASTWITHDRAWTIME +Word (24 *Int 3600)    // require(_time > (lastWithdrawTime + 24 hours));
;             )

[forwardToHotWallet-failure-1]
+requires:
      andBool PAUSED ==Int 1 <<Int (20 *Int 8)                   // notPaused
[forwardToHotWallet-failure-2]
+requires:
      andBool CALLER_ID =/=Int WITHDRAWER                        // onlyWithdrawer
[forwardToHotWallet-failure-3]
+requires:
      andBool AMOUNT <=Int 0                                     // require(_amount > 0);
[forwardToHotWallet-failure-4]
+requires:
      andBool NOW <=Int LASTWITHDRAWTIME +Word (24 *Int 3600)    // require(_time > (lastWithdrawTime + 24 hours));
